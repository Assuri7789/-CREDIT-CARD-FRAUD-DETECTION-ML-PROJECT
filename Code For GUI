import tkinter as tk
import pandas as pd
from PIL import Image, ImageTk
import pygame

# Load the prediction dataset into a Pandas DataFrame
df = pd.read_csv("C://Users//Dell//udacity-git-course//ML PROJECT//submission.csv")

# Define the Tkinter GUI
class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.master.title("Prediction Lookup")
        
        # Create a PhotoImage object from the background image
        bg_image = tk.PhotoImage(file="bif.png")

        # Create a label widget to display the background image
        self.background_label = tk.Label(self.master, image=bg_image)
        self.background_label.image = bg_image  # keep a reference to the image
        
        # Pack the background label first so it fills the entire window
        self.background_label.pack()
        
        # Create the moving text heading
        self.heading_text = tk.StringVar(value="CREDIT CARD FRAUD TRANSACTION")
        self.heading_label = tk.Label(self.master, font=("Times New Roman", 40), textvariable=self.heading_text, foreground="#0000FF", bg="#C5C6D0")
        self.heading_label.place(relx=0.5, rely=0.1, anchor=tk.CENTER)
        self.heading_index = 0
        self.heading_direction = 1
        self.heading_animation()

        # Create the ID input label and entry widget
        self.id_label = tk.Label(self.master, text="ID:", font=("Times New Roman", 20), bg="#C5C6D0")
        self.id_label.place(relx=0.5, rely=0.3, anchor=tk.CENTER)
        self.id_entry = tk.Entry(self.master,font=("Times New Roman", 20),bg="#C5C6D0")
        self.id_entry.place(relx=0.5, rely=0.35, anchor=tk.CENTER)

        # Create the prediction output label
        self.prediction_label = tk.Label(self.master, text="", font=("Times New Roman", 20),bg="#C5C6D0")
        self.prediction_label.place(relx=0.5, rely=0.4, anchor=tk.CENTER)

        # Create the submit button
        self.submit_button = tk.Button(self.master, text="Submit", command=self.get_prediction, font=("Times New Roman", 20),bg="#C5C6D0")
        self.submit_button.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

    def heading_animation(self):
        # Update the heading text to display a moving animation
        self.heading_text.set(" " * self.heading_index + "CREDIT CARD FRAUD DETECTION" + " " * (20 - self.heading_index))
        self.heading_index += self.heading_direction
        if self.heading_index == 0 or self.heading_index == 20:
            self.heading_direction *= -1
        self.heading_label.after(100, self.heading_animation)

    def get_prediction(self):
        # Get the ID value from the entry widget
        id = int(self.id_entry.get())

        # Look up the corresponding prediction and probability score in the dataset
        prediction = df.loc[df['id'] == id, 'Predictions'].values[0]

        # Update the prediction output label
        self.prediction_label.config(text=f"Prediction: {prediction}")

        # Print the prediction value
        if prediction == 1:
            print("FRAUD")
            
        
            
            # Display the FRAUD image
            img = Image.open("C://Users//Dell//udacity-git-course//ML PROJECT//FRAUD.png")
            img = img.resize((400, 300), Image.ANTIALIAS)
            photo = ImageTk.PhotoImage(img)
            self.fraud_image = tk.Label(self.master, image=photo)
            self.fraud_image.image = photo
            self.fraud_image.place(relx=0.5, rely=0.6, anchor=tk.CENTER)
            
            pygame.init()
            sound = pygame.mixer.Sound("C://Users//Dell//udacity-git-course//ML PROJECT//fraud1.mp3")
            sound.play()
            
            # Remove the VALID image if it exists
            if hasattr(self, 'valid_image'):
                self.valid_image.destroy()
        else:
            print("VALID TRANSACTION")
            
            # Display the VALID image
            img = Image.open("C://Users//Dell//udacity-git-course//ML PROJECT//VALID.png")
            img = img.resize((400, 300), Image.ANTIALIAS)
            photo = ImageTk.PhotoImage(img)
            self.valid_image = tk.Label(self.master, image=photo)
            self.valid_image.image = photo
            self.valid_image.place(relx=0.5, rely=0.6, anchor=tk.CENTER)
           
            pygame.init()
            sound = pygame.mixer.Sound("C://Users//Dell//udacity-git-course//ML PROJECT//valid1.mp3")
            sound.set_volume(1)
            sound.play()
            
        
# Create the Tkinter application and run it
root = tk.Tk()
app = Application(master=root)
app.mainloop()


